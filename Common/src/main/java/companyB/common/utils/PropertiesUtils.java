package companyB.common.utils;import java.io.File;import java.io.FileInputStream;import java.io.IOException;import java.util.Collections;import java.util.HashMap;import java.util.Map;import java.util.Properties;import static org.apache.commons.lang3.StringUtils.isEmpty;/** * This class provides a simple wrapper for java.util.Properties. * It allows a property to be retrieved using a single-line of code. * This class is designed to work with both key=value and XML type properties files. * @author C.A. Burrell deltafront@gmail.com */public class PropertiesUtils extends UtilityBase{    private static Properties props;    private static Map<String, Properties> props_map = Collections.synchronizedMap(new HashMap<String, Properties>());    /**     * Returns the property value associated with 'key'.     * @param path location of properties file     * @param key  attribute to get property value for     * @return value associated with key, or null     */    public String getProperty(String path, String key)    {        loadPropertiesFromFile(path);        return (isEmpty(key)) ? null : props.getProperty(key);    }    /**     * Returns a map of all properties contained within field located at 'path'     * @param path path at which desired file is located     * @return HashMap of all properties contained within field located at 'path'     */    @SuppressWarnings({"unchecked"})    public HashMap<String, String> getProperties(String path)    {        final HashMap<String, String> map = new HashMap<>();        if (!isEmpty(path) && !map.containsKey(path)) loadPropertiesFromFile(path);        if (!isEmpty(path)) fillPropertiesMapping(path, map);        return (!isEmpty(path)) ? map : null;    }    private void fillPropertiesMapping(String path, HashMap<String, String> map)    {        final Properties _props = props_map.get(path);        props.keySet().forEach( _key -> fillPropertyMapping(map, _props, _key));    }    private void fillPropertyMapping(HashMap<String, String> map, Properties _props, Object _key)    {        final String key = String.valueOf(_key);        final String value = (String) _props.get(key);        map.put(key, value);    }    private void loadPropertiesFromFile(String path)    {        props = new Properties();        try        {            if (isEmpty(path)) throw new IOException("Filename must be provided");            final File file = new File(path);            final FileInputStream fis = new FileInputStream(file);            if(path.contains(".xml"))  props.loadFromXML(fis);            else props.load(fis);            props_map.put(path, props);        }        catch (IOException e)        {            LOGGER.error(e.getMessage(),e);            throw new IllegalStateException(                    "ClasspathPropertiesLoader: Unable to find the file on the classpath:\n",                    e);        }    }}